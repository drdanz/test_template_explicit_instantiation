name: CI Workflow

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    name: '[${{ matrix.config.project_tags }}@${{ matrix.config.os }}@${{ matrix.config.build_type }}]'
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            artifact: "",
            os: windows-2019,
            project_tags: "Unstable",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            cmake_generator: "Visual Studio 16 2019",
            cmake_toolset: "v142",
            cmake_platform: "x64",
            cmake_toolchain_file: "",
            cmake_initial_cache_file: "",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu Latest GCC",
            artifact: "",
            os: ubuntu-latest,
            project_tags: "Unstable",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            cmake_generator: "Unix Makefiles",
            cmake_toolset: "",
            cmake_platform: "",
            cmake_toolchain_file: "",
            cmake_initial_cache_file: "",
            environment_script: ""
          }
        - {
            name: "Ubuntu Latest Clang",
            artifact: "",
            os: ubuntu-latest,
            project_tags: "Unstable",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            cmake_generator: "Unix Makefiles",
            cmake_toolset: "",
            cmake_platform: "",
            cmake_toolchain_file: "",
            cmake_initial_cache_file: "",
            environment_script: ""
          }

    steps:
    - uses: actions/checkout@master

    - name: Prepare Environment Script
      shell: cmake -P {0}
      run: |
        set(_env_script environment_script.cmake)
        file(WRITE ${_env_script} "")
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "${{ matrix.config.environment_script }}" STREQUAL "")
          execute_process(
              COMMAND "${{ matrix.config.environment_script }}" && set
              OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)

          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              file(APPEND ${_env_script} "set(ENV{${CMAKE_MATCH_1}â€Š} "${CMAKE_MATCH_2}\n")")
            endif()
          endforeach()
        endif()

        file(APPEND "set(ENV{CC} ${{ matrix.config.cc }})\n")
        file(APPEND ${_env_script} "set(ENV{CXX} ${{ matrix.config.cxx }})\n")

        file(READ ${_env_script} _out)
        message("\n\n------\n${_out}------\n")

    # Print environment variables to simplify development and debugging
    - name: Environment Variables
      shell: bash
      run: env

    - name: Configure
      shell: cmake -P {0}
      run: |
        include(environment_script.cmake)

        set(_generator)
        if(NOT "${{ matrix.config.cmake_toolset }}" STREQUAL "")
          set(_generator -G "${{ matrix.config.cmake_generator }}")
        endif()

        set(_toolset)
        if(NOT "${{ matrix.config.cmake_toolset }}" STREQUAL "")
          list(APPEND toolset -T ${{ matrix.config.cmake_toolset }})
        endif()

        set(_platform)
        if(NOT "${{ matrix.config.cmake_platform }}" STREQUAL "")
          list(APPEND _platform -A ${{ matrix.config.cmake_platform }})
        endif()

        set(_initial_cache_file)
        if(NOT "${{ matrix.config.cmake_initial_cache_file }}" STREQUAL "")
          set(_initial_cache_file -C "${{ matrix.config.cmake_initial_cache_file }}")
        endif()

        set(_toolchain_file)
        if(NOT "${{ matrix.config.cmake_toolchain_file }}" STREQUAL "")
          set(_toolchain_file -D CMAKE_TOOLCHAIN_FILE=${{ matrix.config.cmake_toolchain_file }})
        endif()

        set(_build_type)
        if(NOT "${{ matrix.config.build_type }}" STREQUAL "")
          set(build_type -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }})
        endif()

        execute_process(
          COMMAND ${CMAKE_COMMAND}
            -S .
            -B build
            ${_generator}
            ${_toolset}
            ${_platform}
            ${_initial_cache_file}
            ${_toolchain_file}
            ${_build_type}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
        message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        include(environment_script.cmake)

        execute_process(
          COMMAND ${CMAKE_COMMAND}
            --build build
            --config ${{ matrix.config.build_type }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Run tests
      shell: cmake -P {0}
      run: |
        include(environment_script.cmake)

        message("PATH=$ENV{PATH}")

        execute_process(
          COMMAND ${CMAKE_CTEST_COMMAND}
            -VV
            --build-config ${{ matrix.config.build_type }}
            --output-on-failure
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if(NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
